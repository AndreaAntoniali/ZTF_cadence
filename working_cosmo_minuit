#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Apr  5 14:48:10 2023

@author: cosmostage
"""

import numpy as np
from scipy.optimize import curve_fit
from astropy.cosmology import w0waCDM
import Working_minuit as wk
import pandas as pd 
import matplotlib.pyplot as plt
from scipy import interpolate

def rate_SNIa(z):
    '''
    For a given redshift z, returns the Perrett's rate of supernovae SNIa 
    expected at this z :  r = (1+z)**2,11

    Parameters
    ----------
    z : numerical value
        The redshift value

    Returns
    -------
    r : numerical value
        The rate of supernovae
    '''
    r = (1+z)**2.11
    return r


def generate_perrett_distrib(N, low_z = 0.01, high_z = 1.1, step = 0.01):
    '''
    Generate a distribution of redshift of supernovae SNIa according to 
    Perrett's rate : r = (1+z)**2,11

    Parameters
    ----------
    N : integer
        Number of supernovae to generate
    low_z : numerical value
        Lower bound from which the supernovae will be generated. 
        The Perrett's rate is more accurate above z = 0.1.
        The default is 0.01.
    high_z : numerical value
        Upper bound at which the supernovae will be generated. 
        The Perrett's rate is more accurate below z = 1.1 The default is 1.1.
        
    step : numerical value
        the distance between the base value of z generated.  
        The default is 0.01.

    Returns
    -------
    zsimu : array of numerical values
        An array containing the redshift value of N supernovae according to
        Perrett's rate distribution.  

    '''
    rng = np.random.default_rng()
    z = np.arange(low_z, high_z, step)
    distrib = rate_SNIa(z)
    norm = np.sum(distrib)
    weight = distrib/norm
    
    zsimu = rng.choice(z, N, p = weight)
    return zsimu


def fom(covariance_matrix, DeltaXi2 = 6.17):
    '''
    Calculates the Figure of Merit such as : FoM = pi/A
    A being : A = pi*(DeltaXi2) *sigma_w0 *sigma_wa *sqrt(1-pearson**2)

    Parameters
    ----------
    covariance_matrix : numpy array of float
        a covariance matrix 
    DeltaXi2 : float, optional
        The degree of confidence level wanted. The default is 6.3.
        Note : 
            1 sigma : CL : 68.3%, DeltaXi2 : 2.3
            2 sigma : CL : 95,4%, DeltaXi2 : 6.17
            3 sigma : CL : 99,7 % DeltaXi2 : 11.8

    Returns
    -------
    Figure_of_merit : float
        A numerical value indicating the accuracy of our covariance matrix.
    '''
    pearson = covariance_matrix[0, 1]/(np.sqrt(covariance_matrix[0, 0])*\
                                              np.sqrt(covariance_matrix[1, 1]))
        
    # print('\n np.sqrt(covariance_matrix[0, 0]', np.sqrt(covariance_matrix[0, 0]))
    # print('\n np.sqrt(covariance_matrix[1, 1])', np.sqrt(covariance_matrix[1, 1]))
    # print('\n covariance_matrix[1, 1])',covariance_matrix[1, 1] )
    
    A = np.pi * DeltaXi2 * np.sqrt(covariance_matrix[0, 0])* np.sqrt(covariance_matrix[1, 1]) * np.sqrt(1-pearson**2)
    Figure_of_merit = np.pi/A
    
    return (Figure_of_merit)


def plot_cosmo(N):
    '''
    Plot a cosmological fit of the three parameters w0, wa and omega_m for a number 
    of supernovae given. 

    Parameters
    ----------
    N : int
        number f supernovae generated according to Perret's rate 

    Returns
    -------
    None.

    '''
    z = generate_perrett_distrib(N)
    sig = 0.01
    cosmo = w0waCDM(H0=70,Om0 = 0.3, Ode0=0.7,  w0=-1, wa = 0)
    distance_modulus = np.random.normal(cosmo.distmod(z).value, sig)
    sigma = sig * cosmo.distmod(z).value
    A = wk.Fit(z, distance_modulus, sigma)
    m = A.minuit_fit(-1, 0, 0.3)
    par = m.values
    par_error = m.errors
    
    cosmo_fit = w0waCDM(H0=70,Om0 = par[2], Ode0=0.7,  w0=par[0], wa = par[1])
    
    par_error = np.round(par_error, 2)
    par = np.round(par, 2)
    plt.figure(figsize =(10, 8))
    plt.errorbar(z, distance_modulus, yerr=sigma, fmt= '.' , \
                 label = 'Observations')
        
    plt.plot(np.linspace(0.01, 1.1, 100), \
              cosmo.distmod(np.linspace(0.01, 1.1, 100)), '',  \
              label = r'Fit for $w_0 $= {} $\pm$ {},$w_a$ = {} $\pm$ {},$\Omega_m$ = {} $\pm$ {} '\
                  .format(par[0], par_error[0],\
                          par[1], par_error[1], par[2], par_error[2]))
        
    plt.legend(fontsize = 15)
    plt.xlabel('Redshit z', fontsize = 15)
    plt.ylabel(r'distance modulus $\mu$', fontsize = 15)
    plt.title(r'Redshift againt $\mu$ for {} supernovae with a prior on $\Omega_m$'.format(len(z)),\
              fontsize = 15)

for i in range(0, 100):
    f = interpolate.interp1d([0, 1.1], [0.001, 0.06])
    
    z = generate_perrett_distrib(10)
    sigma_inter = f(z)
    
    cosmo = w0waCDM(H0=70,Om0 = 0.3, Ode0=0.7,  w0=-1, wa = 0)
    dist = np.random.normal(cosmo.distmod(z).value,  sigma_inter)
    sigma = sigma_inter
    A = wk.Fit(z, dist, sigma)
    
    
    print('Fisher FoM', fom(A.covariance_fisher(-1, 0, 0.3)))
   # print('Minuit FoM', fom(A.minuit_covariance(-1, 0, 0.3)))